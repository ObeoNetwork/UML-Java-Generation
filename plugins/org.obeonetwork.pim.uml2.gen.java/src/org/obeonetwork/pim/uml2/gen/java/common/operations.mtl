[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2011 Obeo
 * All rights reserved.  This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 1.0
 * 
 * You can apply any license to the files generated with this module and Acceleo.
[/comment]

[**
 * The documentation of the module operations.
 * @author Stephane Begaudeau - Obeo
 */]
[module operations('http://www.eclipse.org/uml2/3.0.0/UML')]

[import org::obeonetwork::pim::uml2::gen::java::common::behavior /]
[import org::obeonetwork::pim::uml2::gen::java::common::common /]
[import org::obeonetwork::pim::uml2::gen::java::common::declaration /]
[import org::obeonetwork::pim::uml2::gen::java::request::request /]

[template public genOperations (anInterface : Interface) ]
[for (anOperation : Operation | anInterface.ownedOperation)]
[anOperation.genOperationComment()/]
[anOperation.genMethodPrototype()/];

[/for]
// [protected ('(user defined methods)')]

// [/protected]
[/template]

[template public genOperations(aClass : Class)]
[for (anOperation : Operation | ownedOperation->reject(name.equalsIgnoreCase(aClass.name)))]
[anOperation.genOperationComment()/]
[if (anOperation.isAbstract)]
[anOperation.genMethodPrototype()/];
[else]
[anOperation.genMethodPrototype()/] {
	[anOperation.genBehavior()/]
}
[/if] 
[/for]
[for (anOperation : Operation | aClass.getAllInterfaceOperations())]
[anOperation.genInheritedOperationComment()/]
[if (anOperation.isAbstract)]
[anOperation.genMethodPrototype()/];
[else]
[anOperation.genMethodPrototype()/] {
	[anOperation.genBehavior()/]
}
[/if]
[/for]

// [protected ('(user defined methods)')]

// [/protected]

[/template]

[template public genOperationComment(anOperation : Operation)]
/**
[if (anOperation.ownedComment <> null and anOperation.ownedComment->size() > 0 and anOperation.ownedComment._body->forAll(b : String | not ''.equalsIgnoreCase(b)))]
[for (aComment : Comment | anOperation.ownedComment)]
 * [aComment._body/]
[/for]
[else]
 * Description of the method [anOperation.genName()/].
[/if]
[for (parameter : Parameter | anOperation.ownedParameter)]
[if (parameter.direction <> ParameterDirectionKind::return)]
 * @param [parameter.genName()/] [parameter.genComment()/]
[/if]
[/for]
[for (parameter : Parameter | anOperation.ownedParameter)]
[if (parameter.direction = ParameterDirectionKind::return)]
 * @return [parameter.genComment()/]
[/if]
[/for]
 */
[/template]

[template public genInheritedOperationComment(anOperation : Operation)]
/**
 * {@inheritDoc}
[if(anOperation.eContainer().oclIsKindOf(Interface))]
 * @see [anOperation.eContainer().oclAsType(Interface).genPackagePath()/].[anOperation.eContainer().oclAsType(Interface).name/]
[/if]
 *
[for (parameter : Parameter | anOperation.ownedParameter->select(param : Parameter | param.direction <> ParameterDirectionKind::return))]
 * @param [genName()/][genComment()/]
[/for]
[for (parameter : Parameter | anOperation.ownedParameter->select(param : Parameter | param.direction = ParameterDirectionKind::return))]
 * @return [genName()/][genComment()/]
[/for]
 */
[/template]
