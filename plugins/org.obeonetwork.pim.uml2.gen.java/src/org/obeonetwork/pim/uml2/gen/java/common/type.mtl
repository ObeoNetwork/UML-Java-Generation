[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2011 Obeo
 * All rights reserved.  This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 1.0
 * 
 * You can apply any license to the files generated with this module and Acceleo.
[/comment]

[**
 * The documentation of the module type.
 * @author Stephane Begaudeau - Obeo
 */]
[module type('http://www.eclipse.org/uml2/3.0.0/UML')/]

[import org::obeonetwork::pim::uml2::gen::java::common::common /]
[import org::obeonetwork::pim::uml2::gen::java::common::properties /]


[template public genReturn(anOperation : Operation) post(trim())]
[if (anOperation.ownedParameter->select(param : Parameter | param.direction = ParameterDirectionKind::return) <> null)]
[anOperation.ownedParameter->select(param : Parameter | param.direction = ParameterDirectionKind::return)->first().genType()/]
[else]
void
[/if]
[/template]

[template public genType(aProperty : Property) post(trim())]
[if (aProperty.upper = 1)]
[aProperty.genTypeName()/]
[elseif (aProperty.isArray())]
[aProperty.genTypeName()/]['['/][']'/]	
[else]
[aProperty.genCollectionType()/]<[aProperty.genTypeName()/]>
[/if]
[/template]

[template public genType(aParameter : Parameter) post(trim())]
[if (aParameter.upper = 1)]
[aParameter.genTypeName()/]
[elseif (aParameter.isArray())]
[aParameter.genTypeName()/]['['/][']'/]
[else]
[aParameter.genCollectionType()/]<[aParameter.genTypeName()/]>
[/if]
[/template]

[template protected genCollectionType(aMultiplicityElement : MultiplicityElement) post(trim())]
[if (aMultiplicityElement.isOrdered)]
[aMultiplicityElement.getOrderedCollectionClass()/]
[else]
[aMultiplicityElement.getNotOrderedCollectionClass()/]
[/if]
[/template]

[template protected genTypeName(aTypedElement : TypedElement) post(trim())]
[if (aTypedElement.type = null)]
Object
[elseif (getProperty('java.typeconversion.' + aTypedElement.type.name) <> null)]
[getProperty('java.typeconversion.' + aTypedElement.type.name).tokenize('.')->last()/]
[elseif (type.name = 'UnlimitedNatural')]
Integer
[else]
[aTypedElement.type.genName().tokenize('.')->last()/]
[/if]
[/template]

[query protected isJavaPrimitive(aType : Type) : Boolean = 
	aType.name.equalsIgnoreCase('int')
	or aType.name.equalsIgnoreCase('Integer')
	or aType.name.equalsIgnoreCase('float')
	or aType.name.equalsIgnoreCase('boolean')
	or aType.name.equalsIgnoreCase('byte')
	or aType.name.equalsIgnoreCase('long')
	or aType.name.equalsIgnoreCase('short')
	or aType.name.equalsIgnoreCase('char')
	or aType.name.equalsIgnoreCase('Character')
	or aType.name.equalsIgnoreCase('void')
	or aType.name.equalsIgnoreCase('String')
	or aType.name.equalsIgnoreCase('double')
 /]
