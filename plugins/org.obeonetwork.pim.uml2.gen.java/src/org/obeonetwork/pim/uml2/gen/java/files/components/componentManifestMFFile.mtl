[comment encoding = UTF-8 /]
[module componentManifestMFFile('http://www.eclipse.org/uml2/4.0.0/UML')]

[import org::obeonetwork::pim::uml2::gen::java::common::path/]

[import org::obeonetwork::pim::uml2::gen::java::services::configurationServices /]
[import org::obeonetwork::pim::uml2::gen::java::services::workspaceServices /]

[template private componentManifestMFFile(aComponent : Component)]
[aComponent.genComponentPath()/]/META-INF/MANIFEST.MF
[/template]

[template public genComponentManifestMFFile(aComponent : Component) ? (not (aComponent.reqGetGenerationRootPath() + '/' + aComponent.componentManifestMFFile()).reqResourceExists())]
[file (aComponent.componentManifestMFFile(), false, 'UTF-8')]
Manifest-Version: 1.0
Bundle-ManifestVersion: 2
Bundle-Name: %Bundle-Name
Bundle-SymbolicName: [aComponent.genComponentPath()/]
Bundle-Version: [aComponent.reqGetVersion()/].qualifier
Bundle-Vendor: %Provider-Name
Bundle-Localization: plugin
Bundle-RequiredExecutionEnvironment: [aComponent.reqGetJREExecutionEnvironment()/]
Bundle-ActivationPolicy: lazy
[aComponent.importExportPackages()/]

[/file]
[/template]

[template private importExportPackages(aComponent : Component) post(trim()) {
	exportedInterfaces: Sequence(Interface) = aComponent.ownedPort.type->asSequence()->filter(Class).interfaceRealization.contract;
	importedClassifiers: Sequence(Classifier) = aComponent.ownedPort.type.eInverse(Usage).supplier->filter(Classifier)->reject(ancestors(Component)->includes(aComponent))->asSequence();
}]
[if (exportedInterfaces->size() > 0)]
Export-Package: [exportedInterfaces->first().packageName()/];version="[aComponent.reqGetVersion()/]"[if (exportedInterfaces->size() > 1)],[/if]
[for (anExportedInterface : Interface | exportedInterfaces->excluding(exportedInterfaces->first()))]
 [anExportedInterface.packageName()/];version="[aComponent.reqGetVersion()/]"[if (i < exportedInterfaces->size() - 1)],[/if]
[/for][/if]
[if (importedClassifiers->size() > 0)]
Import-Package: [importedClassifiers->first().packageName()/];version="[aComponent.reqGetVersion()/]"[if (importedClassifiers->size() > 1)],[/if]
[for (anImportedClassifier : Classifier | importedClassifiers->excluding(importedClassifiers->first()))]
 [anImportedClassifier.packageName()/];version="[aComponent.reqGetVersion()/]"[if (i < importedClassifiers->size() - 1)],[/if]
[/for]
[/if]
[/template]

[template private packageName(aClassifier : Classifier)]
[aClassifier.ancestors(Package)->select(oclIsTypeOf(Package))->reverse().name->sep('.')/]
[/template]