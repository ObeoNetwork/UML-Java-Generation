[comment encoding = UTF-8 /]
[module imports('http://www.eclipse.org/uml2/4.0.0/UML')]

[import org::obeonetwork::pim::uml2::gen::java::common::path /]
[import org::obeonetwork::pim::uml2::gen::java::common::type /]
[import org::obeonetwork::pim::uml2::gen::java::properties::properties /]

[template public genImport(aClassifier : Classifier)]

[if (not aClassifier.isArray())]
[if (aClassifier.orderedUniqueMultiplicityElements()->size() > 0)]
import [aClassifier.getOrderedUniqueCollectionClassPath()/];
[/if]
[if (aClassifier.notOrderedNotUniqueMultiplicityElements()->size() > 0)]
import [aClassifier.getNotOrderedNotUniqueCollectionClassPath()/];
[/if]
[if (aClassifier.notOrderedUniqueMultiplicityElements()->size() > 0)]
import [aClassifier.getNotOrderedUniqueCollectionClassPath()/];
[/if]
[if (aClassifier.orderedNotUniqueMultiplicityElements()->size() > 0)]
import [aClassifier.getOrderedNotUniqueCollectionClassPath()/];
[/if]
[/if]
[if (aClassifier.oclIsKindOf(Class) and (aClassifier.oclAsType(Class).getTypeList()->size() > 0))]
[for (aType : Type | aClassifier.oclAsType(Class).getTypeList())]
[if (not ''.equalsIgnoreCase(aType.importValue()))]
import [aType.importValue()/];
[/if]
[/for]
[elseif (aClassifier.oclIsKindOf(Interface) and (aClassifier.oclAsType(Interface).getTypeList()->size() > 0))]
[for (aType : Type | aClassifier.oclAsType(Interface).getTypeList())]
[if (not ''.equalsIgnoreCase(aType.importValue()))]
import [aType.importValue()/];
[/if]
[/for]
[/if]
// [protected ('(user defined imports)')]

// [/protected]

[/template]

[query public importValue(aType : Type) : String = if (''.equalsIgnoreCase(aType.genPackagePath())) then getProperty(aType.name) else aType.genPackagePath() + '.' + aType.name endif /]

[query protected orderedUniqueMultiplicityElements(aClassifier : Classifier) : Collection(MultiplicityElement) =
   aClassifier.multiplicityElements()->select(elem : MultiplicityElement | (elem.upper = -1 or elem.upper > 1) and elem.isOrdered and elem.isUnique)
/]

[query protected orderedNotUniqueMultiplicityElements(aClassifier : Classifier) : Collection(MultiplicityElement) =
   aClassifier.multiplicityElements()->select(elem : MultiplicityElement | (elem.upper = -1 or elem.upper > 1) and elem.isOrdered and not elem.isUnique)
/]

[query protected notOrderedUniqueMultiplicityElements(aClassifier : Classifier) : Collection(MultiplicityElement) =
   aClassifier.multiplicityElements()->select(elem : MultiplicityElement | (elem.upper = -1 or elem.upper > 1) and not elem.isOrdered and elem.isUnique)
/]

[query protected notOrderedNotUniqueMultiplicityElements(aClassifier : Classifier) : Collection(MultiplicityElement) =
   aClassifier.multiplicityElements()->select(elem : MultiplicityElement | (elem.upper = -1 or elem.upper > 1) and not elem.isOrdered and not elem.isUnique)
/]

[query protected multiplicityElements(aClassifier : Classifier) : Collection(MultiplicityElement) =
   ownedMember->filter(Operation).ownedParameter.oclAsType(MultiplicityElement)->union(ownedMember->filter(Property).oclAsType(MultiplicityElement))->union(getAssociations().navigableOwnedEnd)
 /]

[template public genImportPath(aType : Type) post(trim())]
[if (not getProperty('java.typeconversion.' + name).oclIsUndefined() and (getProperty('java.typeconversion.' + name).size() > 0))]
[getProperty('java.typeconversion.' + name)/]
[else]
[aType.importValue()/]
[/if]
[/template]


[query protected getTypeList(aClass : Class) : Sequence(Type) =
   if (aClass.getGeneralTypes()->size() > 0) then
      Sequence(Type){}
         ->merge(aClass.getOwnedAttributesTypeList())
         ->merge(aClass.getAssociationsTypeList())
         ->merge(aClass.getOwnedOperationsParametersTypeList())
         ->merge(aClass.getOwnedOperationsExceptionsTypeList())
         ->merge(aClass.getNestedClassifiersTypeList())
         ->including(aClass.getGeneralTypes()->first())
         ->reject(oclIsUndefined())->asOrderedSet()->asSequence()
   else
      Sequence(Type){}
         ->merge(aClass.getOwnedAttributesTypeList())
         ->merge(aClass.getAssociationsTypeList())
         ->merge(aClass.getOwnedOperationsParametersTypeList())
         ->merge(aClass.getOwnedOperationsExceptionsTypeList())
         ->merge(aClass.getNestedClassifiersTypeList())
         ->reject(oclIsUndefined())->asOrderedSet()->asSequence()
   endif
/]

[query private getOwnedAttributesTypeList(aClass : Class) : Sequence(Type) =
   if ownedAttribute->size() > 0 then ownedAttribute.type else Sequence(Type){} endif
/]

[query private getAssociationsTypeList(aClass : Class) : Sequence(Type) =
   if getAssociations()->size() > 0 and (getAssociations().navigableOwnedEnd->size() > 0) then getAssociations().navigableOwnedEnd.type->asSequence() else Sequence(Type){} endif
/]

[query private getOwnedOperationsParametersTypeList(aClass : Class) : Sequence(Type) =
   if ownedOperation-> size() > 0 and (ownedOperation.ownedParameter->size() > 0) then ownedOperation.ownedParameter.type else Sequence(Type){} endif
/]

[query private getOwnedOperationsExceptionsTypeList(aClass : Class) : Sequence(Type) =
   if ownedOperation-> size() > 0 and (ownedOperation.raisedException->size() > 0) then ownedOperation.raisedException else Sequence(Type){} endif
/]

[query private getNestedClassifiersTypeList(aClass : Class) : Sequence(Type) =
   if nestedClassifier->size() > 0 and (nestedClassifier->filter(Class)->size() > 0) then nestedClassifier->filter(Class).getTypeList() else Sequence(Type){} endif
/]

[query private merge(firstSequence : Sequence(T), secondSequence : Sequence(T)) : Sequence(Type) =
   if not (firstSequence->size() = 0) then
      firstSequence->union(secondSequence)
   else 
      if not (secondSequence->size() = 0) then
         secondSequence
      else
         Sequence(Type){}
      endif
   endif
/]

[query protected getTypeList(anInterface : Interface) : Sequence(Type) =
   if (anInterface.getGeneralTypes()->size() > 0) then
      Sequence(Type){}
         ->merge(anInterface.getOwnedAttributesTypeList())
         ->merge(anInterface.getAssociationsTypeList())
         ->merge(anInterface.getOwnedOperationsParametersTypeList())
         ->merge(anInterface.getOwnedOperationsExceptionsTypeList())
         ->merge(anInterface.getNestedClassifiersTypeList())
         ->including(anInterface.getGeneralTypes()->first())
         ->asOrderedSet()->asSequence()
   else
      Sequence(Type){}
         ->merge(anInterface.getOwnedAttributesTypeList())
         ->merge(anInterface.getAssociationsTypeList())
         ->merge(anInterface.getOwnedOperationsParametersTypeList())
         ->merge(anInterface.getOwnedOperationsExceptionsTypeList())
         ->merge(anInterface.getNestedClassifiersTypeList())
         ->asOrderedSet()->asSequence()
   endif
/]


[query private getOwnedAttributesTypeList(anInterface : Interface) : Sequence(Type) =
   if ownedAttribute->size() > 0 then ownedAttribute.type else Sequence(Type){} endif
/]

[query private getAssociationsTypeList(anInterface : Interface) : Sequence(Type) =
   if getAssociations()->size() > 0 and (getAssociations().navigableOwnedEnd->size() > 0) then getAssociations().navigableOwnedEnd.type->asSequence() else Sequence(Type){} endif
/]

[query private getOwnedOperationsParametersTypeList(anInterface : Interface) : Sequence(Type) =
   if ownedOperation->size() > 0 and (ownedOperation.ownedParameter->size() > 0) and (ownedOperation.ownedParameter.type->size() > 0)then ownedOperation.ownedParameter.type else Sequence(Type){} endif
/]

[query private getOwnedOperationsExceptionsTypeList(anInterface : Interface) : Sequence(Type) =
   if ownedOperation-> size() > 0 and (ownedOperation.raisedException->size() > 0) then ownedOperation.raisedException else Sequence(Type){} endif
/]

[query private getNestedClassifiersTypeList(anInterface : Interface) : Sequence(Type) =
   if nestedClassifier->filter(Class)->size() > 0 then nestedClassifier->filter(Class).getTypeList()->asSequence() else Sequence(Type){} endif
/]

[query private getGeneralTypes(aClassifier : Classifier) : Sequence(Type) =
   if general->size() > 0 then general->asSequence() else Sequence(Type){} endif
/]
