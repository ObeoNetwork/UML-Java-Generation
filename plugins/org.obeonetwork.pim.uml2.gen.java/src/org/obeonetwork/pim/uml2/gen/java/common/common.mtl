[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2011 Obeo
 * All rights reserved.  This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 1.0
 * 
 * You can apply any license to the files generated with this module and Acceleo.
[/comment]

[**
 * The documentation of the module common.
 * @author Stephane Begaudeau - Obeo
 */]
[module common('http://www.eclipse.org/uml2/3.0.0/UML')/]

[import org::obeonetwork::pim::uml2::gen::java::services::commonServices /]

[template public genJavadoc (aClassifier : Classifier) ]
/**
[if (aClassifier.ownedComment->size() > 0 and aClassifier.ownedComment._body->forAll(b : String | not ''.equalsIgnoreCase(b)))]
[for (aComment : Comment | aClassifier.ownedComment)]
[javadocStar(aComment._body)/][/for]
[elseif (aClassifier.eAnnotations.details->select(entry | entry.key = 'documentation')->size() > 0)]
[for (documentation : String | aClassifier.eAnnotations.details->select(entry | entry.key = 'documentation')->collect(entry | entry.value))]
[javadocStar(documentation)/][/for]
[else]
 * Description of [aClassifier.name/].
[/if]
 */
[/template]

[template public genName(aNamedElement : NamedElement)]
[aNamedElement.name/]
[/template]

[template public genPathPrefix(anElement : Element)]

[/template]

[template public genComment(anElement : Element)]
[for (ownedComment : Comment | anElement.ownedComment)]
[ownedComment._body/][/for]
[for (documentation : String | anElement.eAnnotations.details->select(entry | entry.key = 'documentation')->collect(entry | entry.value))]
[documentation/][/for]
[/template]

[template public genPropertyParent(aProperty : Property)]

[/template]

[template public genPackagePath(aType : Type)]
[aType.packagePath().normalizeName()->reverse()->sep('.')/]
[/template]

[query public packagePath(aType : Type) : Sequence(Package) = 
	Sequence{aType.getNearestPackage()}->union(aType.getNearestPackage().ancestors()->filter(Package))->select(pack : Package | pack.oclIsTypeOf(Package))
/]

[template public normalizeName(anElement : NamedElement) post(trim())]
[if ((anElement.name = 'package') or (anElement.name = 'interface') or (anElement.name = 'class'))]
[anElement.name.concat('_')/]
[else]
[anElement.name/]
[/if]
[/template]