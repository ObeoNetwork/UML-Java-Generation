[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2012 Obeo
 * All rights reserved.  This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 1.0
 * 
 * You can apply any license to the files generated with this module and Acceleo.
[/comment]

[**
 * This module is the starting point of the generation.
 * @author Stephane Begaudeau - Obeo
 */]
[module uml2java('http://www.eclipse.org/uml2/4.0.0/UML')]

[import org::obeonetwork::pim::uml2::gen::java::common::path /]

[import org::obeonetwork::pim::uml2::gen::java::files::buildPropertiesFile/]
[import org::obeonetwork::pim::uml2::gen::java::files::classJavaFile /]
[import org::obeonetwork::pim::uml2::gen::java::files::classPathXmlFile/]
[import org::obeonetwork::pim::uml2::gen::java::files::componentProjectXmlFile /]
[import org::obeonetwork::pim::uml2::gen::java::files::coreSettingsFile/]
[import org::obeonetwork::pim::uml2::gen::java::files::enumJavaFile /]
[import org::obeonetwork::pim::uml2::gen::java::files::interfaceJavaFile /]
[import org::obeonetwork::pim::uml2::gen::java::files::jdtSettingsFile/]
[import org::obeonetwork::pim::uml2::gen::java::files::manifestMFFile/]
[import org::obeonetwork::pim::uml2::gen::java::files::pluginPropertiesFile/]

[import org::obeonetwork::pim::uml2::gen::java::services::configurationServices /]
[import org::obeonetwork::pim::uml2::gen::java::services::workspaceServices/]


[template public main(aModel : Model)]
[comment @main /]

[comment Components artifacts generation /]
[for (aComponent : Component | aModel.eAllContents(Component))]
	[if (aComponent.eAllContents(Component)->size() = 0)]
		[comment simple component /]		
		[aComponent.generateComponent()/]
	[else]
		[comment composite component /]
		[aComponent.generateCompositeComponent()/]
	[/if]
[/for]

[comment Type artifacts generation /]
[for (aType : Type | aModel.eAllContents(Type))]
	[if (aType.oclIsKindOf(Class) or aType.oclIsKindOf(Interface) or aType.oclIsKindOf(Enumeration))]
		[comment For all type outside of a component, create a project if it does not exists /]
		[if (aType.ancestors(Component)->size() = 0)]
			[aModel.reqCreateDefaultProject()/]
		[/if]
	[/if]

	[if (aType.oclIsKindOf(Class))]
		[aType.oclAsType(Class).genClassJavaFile()/]
	[elseif (aType.oclIsKindOf(Interface))]
		[aType.oclAsType(Interface).genInterfaceJavaFile()/]
	[elseif (aType.oclIsKindOf(Enumeration))]
		[aType.oclAsType(Enumeration).genEnumJavaFile()/]
	[/if]
[/for]
[/template]

[template private generateComponent(aComponent : Component) ? (not aComponent.reqGetComponentsToIgnore()->includes(aComponent.name))]
[aComponent.genClassPathXmlFile() /]
[aComponent.genComponentProjectXmlFile() /]
[aComponent.genCoreSettingsFile() /]
[aComponent.genJdtSettingsFile() /]
[if (aComponent.reqShouldGenerateOSGiArtifacts() or aComponent.reqShouldGenerateEclipseArtifacts())]
[aComponent.genManifestMFFile() /]
[aComponent.genBuildPropertiesFile() /]
[aComponent.genPluginPropertiesFile() /]
[/if]
[aComponent.genComponentPath().reqImportProject() /]
[/template]

[template private generateCompositeComponent(aComponent : Component) ? (not aComponent.reqGetComponentsToIgnore()->includes(aComponent.name))]

[/template]

