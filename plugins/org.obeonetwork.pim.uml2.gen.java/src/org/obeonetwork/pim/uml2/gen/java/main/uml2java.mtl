[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2012 Obeo
 * All rights reserved.  This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 1.0
 * 
 * You can apply any license to the files generated with this module and Acceleo.
[/comment]

[**
 * This module is the starting point of the generation.
 * @author Stephane Begaudeau - Obeo
 */]
[module uml2java('http://www.eclipse.org/uml2/4.0.0/UML')]

[import org::obeonetwork::pim::uml2::gen::java::common::documentation /]
[import org::obeonetwork::pim::uml2::gen::java::common::path /]

[import org::obeonetwork::pim::uml2::gen::java::files::classJavaFile /]
[import org::obeonetwork::pim::uml2::gen::java::files::enumJavaFile /]
[import org::obeonetwork::pim::uml2::gen::java::files::interfaceJavaFile /]
[import org::obeonetwork::pim::uml2::gen::java::files::packageInfoJavaFile /]

[import org::obeonetwork::pim::uml2::gen::java::files::components::componentBuildPropertiesFile/]
[import org::obeonetwork::pim::uml2::gen::java::files::components::componentClassPathXmlFile/]
[import org::obeonetwork::pim::uml2::gen::java::files::components::componentProjectXmlFile /]
[import org::obeonetwork::pim::uml2::gen::java::files::components::componentCoreSettingsFile/]
[import org::obeonetwork::pim::uml2::gen::java::files::components::componentJdtSettingsFile/]
[import org::obeonetwork::pim::uml2::gen::java::files::components::componentManifestMFFile/]
[import org::obeonetwork::pim::uml2::gen::java::files::components::componentPluginPropertiesFile/]

[import org::obeonetwork::pim::uml2::gen::java::files::components::composite::compositeComponentBuildPropertiesFile /]
[import org::obeonetwork::pim::uml2::gen::java::files::components::composite::compositeComponentFeaturePropertiesFile /]
[import org::obeonetwork::pim::uml2::gen::java::files::components::composite::compositeComponentProjectXmlFile /]
[import org::obeonetwork::pim::uml2::gen::java::files::components::composite::compositeComponentFeatureXmlFile /]

[import org::obeonetwork::pim::uml2::gen::java::services::configurationServices /]
[import org::obeonetwork::pim::uml2::gen::java::services::workspaceServices/]


[template public main(aModel : Model)]
[comment @main /]

[comment Components artifacts generation /]
[for (aComponent : Component | aModel.eAllContents(Component)->select(shouldGenerateComponent()))]
	[if (aComponent.eAllContents(Component)->size() = 0)]
		[comment simple component /]		
		[aComponent.generateComponent()/]
	[else]
		[comment composite component /]
		[aComponent.generateCompositeComponent()/]
	[/if]
[/for]

[comment Type artifacts generation /]
[for (aPackage : Package | aModel.eAllContents(Package)->including(aModel))]
	[if (aPackage.shouldGenerateContent())]
		[for (aType : Type | aPackage.packagedElement->filter(Type)->select(shouldGenerateType()))]
			[if (aType.oclIsTypeOf(Class) or aType.oclIsTypeOf(Interface) or aType.oclIsTypeOf(Enumeration))]
				[comment For all type outside of a component, create a project if it does not exists /]
				[if (aType.ancestors(Component)->size() = 0)]
					[aModel.reqCreateDefaultProject()/]
				[/if]
			[/if]
		
			[if (aType.oclIsTypeOf(Class))]
				[aType.oclAsType(Class).genClassJavaFile()/]
			[elseif (aType.oclIsTypeOf(Interface))]
				[aType.oclAsType(Interface).genInterfaceJavaFile()/]
			[elseif (aType.oclIsTypeOf(Enumeration))]
				[aType.oclAsType(Enumeration).genEnumJavaFile()/]
			[/if]
		[/for]
		
		[comment Generate package-info.java if the package has a documentation/]
		[if (aPackage.hasDocumentation() or aPackage.hasComment())]
			[aPackage.genPackageInfoJavaFile()/]
		[/if]
	[/if]
[/for]

[comment Format everything/]
[aModel.reqFormatProjectCode(aModel.reqGetDefaultProjectName())/]

[for (aComponent : Component | aModel.eAllContents(Component)->select(shouldGenerateComponent()))]
	[if (aComponent.eAllContents(Component)->size() = 0)]
		[comment simple component /]		
		[aModel.reqFormatProjectCode(aComponent.name)/]
	[/if]
[/for]

[/template]

[query private shouldGenerateContent(aPackage : Package) : Boolean = 
	aPackage.ancestors()->including(aPackage)->select(oclIsTypeOf(Package))->filter(Package)->any(aP : Package | reqGetPackagesToIgnoreDuringGeneration()->includes(aP.name))->size() = 0
/]

[query private shouldGenerateType(aType : Type) : Boolean = 
	(not aType.reqGetTypesToIgnoreDuringTheGeneration()->includes(aType.name))
	and (aType.ancestors(Component)->reject(aC: Component | aC.shouldGenerateComponent())->size() = 0)
/]

[query private shouldGenerateComponent(aComponent : Component) : Boolean = 
	(not aComponent.reqGetComponentsToIgnore()->includes(aComponent.name))
	and (aComponent.ancestors(Component)->reject(aC: Component | not aC.reqGetComponentsToIgnore()->includes(aC.name))->size() = 0)
/]


[template private generateComponent(aComponent : Component) ? (not aComponent.reqGetComponentsToIgnore()->includes(aComponent.name))]
[aComponent.genComponentClassPathXmlFile() /]
[aComponent.genComponentProjectXmlFile() /]
[aComponent.genComponentCoreSettingsFile() /]
[aComponent.genComponentJdtSettingsFile() /]
[if (aComponent.reqShouldGenerateOSGiArtifacts() or aComponent.reqShouldGenerateEclipseArtifacts())]
[aComponent.genComponentManifestMFFile() /]
[aComponent.genComponentBuildPropertiesFile() /]
[aComponent.genComponentPluginPropertiesFile() /]
[/if]

[comment Create the default source and output folder /]
[(aComponent.reqGetGenerationRootPath() + '/' + aComponent.name + '/' + aComponent.reqGetSourceFolderPath()).reqCreateFolder()/]
[(aComponent.reqGetGenerationRootPath() + '/' + aComponent.name + '/' + aComponent.reqGetOutputFolderPath()).reqCreateFolder()/]

[aComponent.genComponentPath().reqImportProject() /]
[/template]

[template private generateCompositeComponent(aComponent : Component) ? (not aComponent.reqGetComponentsToIgnore()->includes(aComponent.name))]
[aComponent.genCompositeComponentProjectXmlFile()/]
[if (aComponent.reqShouldGenerateEclipseArtifacts())]
[aComponent.genCompositeComponentBuildPropertiesFile()/]
[aComponent.genCompositeComponentFeaturePropertiesFile()/]
[aComponent.genCompositeComponentFeatureXmlFile()/]
[elseif (aComponent.reqShouldGenerateOSGiArtifacts())]

[/if]

[aComponent.genComponentPath().reqImportProject()/]
[/template]

